{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# %pip install optuna\n",
    "import optuna\n",
    "import torch\n",
    "import rldurham as rld\n",
    "import numpy as np\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import copy\n",
    "device = torch.device(\"cpu\")\n",
    "from collections import deque\n",
    "import torch.optim as optim\n",
    "import random"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Make Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Actor(nn.Module):\n",
    "    def __init__(self, state_dim, action_dim, fc1=400, fc2=300):\n",
    "        super(Actor, self).__init__()\n",
    "\n",
    "        self.l1 = nn.Linear(state_dim, fc1)\n",
    "        self.l2 = nn.Linear(fc1, fc2)\n",
    "        self.l3 = nn.Linear(fc2, action_dim)\n",
    "\n",
    "\n",
    "\n",
    "    def forward(self, state):\n",
    "        a = F.relu(self.l1(state))\n",
    "        a = F.relu(self.l2(a))\n",
    "        return torch.tanh(self.l3(a)) # max_action = 1 so no need to multiply\n",
    "     \n",
    "class Critic(nn.Module):\n",
    "    def __init__(self, state_size, action_size, fc1=400, fc2=300):\n",
    "        super(Critic, self).__init__()\n",
    "\n",
    "        # Q1 architecture\n",
    "        self.l1 = nn.Linear(state_size + action_size, fc1)\n",
    "        self.l2 = nn.Linear(fc1, fc2)\n",
    "        self.l3 = nn.Linear(fc2, 1)\n",
    "\n",
    "        # Q2 architecture\n",
    "        self.l4 = nn.Linear(state_size + action_size, fc1)\n",
    "        self.l5 = nn.Linear(fc1, fc2)\n",
    "        self.l6 = nn.Linear(fc2, 1)\n",
    "\n",
    "    def forward(self, state, action):\n",
    "        \"\"\"Build a critic (value) network that maps (state, action) pairs -> Q-values.\"\"\"\n",
    "        xa = torch.cat([state, action], 1)\n",
    "\n",
    "        x1 = F.relu(self.l1(xa))\n",
    "        x1 = F.relu(self.l2(x1))\n",
    "        x1 = self.l3(x1)\n",
    "\n",
    "        x2 = F.relu(self.l4(xa))\n",
    "        x2 = F.relu(self.l5(x2))\n",
    "        x2 = self.l6(x2)\n",
    "\n",
    "        return x1, x2\n",
    "    \n",
    "class SysModel(nn.Module):\n",
    "    def __init__(self, state_dim, action_dim, fc1=400, fc2=300):\n",
    "        super(SysModel, self).__init__()\n",
    "        self.l1 = nn.Linear(state_dim + action_dim, fc1)\n",
    "        self.l2 = nn.Linear(fc1, fc2)\n",
    "        self.l3 = nn.Linear(fc2, state_dim)\n",
    "\n",
    "\n",
    "    def forward(self, state, action):\n",
    "        \"\"\"Build a system model to predict the next state at a given state.\"\"\"\n",
    "        xa = torch.cat([state, action], 1)\n",
    "\n",
    "        x1 = F.relu(self.l1(xa))\n",
    "        x1 = F.relu(self.l2(x1))\n",
    "        x1 = self.l3(x1)\n",
    "\n",
    "        return x1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# TD3 Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class TD3_FORK:\n",
    "    def __init__(\n",
    "        self,env,\n",
    "        gamma = 0.99, #discount factor\n",
    "        lr_actor = 3e-4,\n",
    "        lr_critic = 3e-4,\n",
    "        lr_sysmodel = 3e-4,\n",
    "        batch_size = 100, # minibatch size for replay buffer sampling\n",
    "        buffer_capacity = 1000000, # replay buffer capacity\n",
    "        tau = 0.02,  # soft update weight / interpolant\n",
    "        policy_noise=0.2, # Policy noise\n",
    "        std_noise = 0.1, # Exploration noise\n",
    "        noise_clip=0.5, # Clips policy noise\n",
    "        policy_freq=2 # Policy delay\n",
    "    ):\n",
    "        self.device = torch.device(\"cpu\")\n",
    "        self.env = env\n",
    "        self.create_actor()\n",
    "        self.create_critic()\n",
    "        self.create_sysmodel()\n",
    "        self.act_opt = optim.Adam(self.actor.parameters(), lr=lr_actor)\n",
    "        self.crt_opt = optim.Adam(self.critic.parameters(), lr=lr_critic)\n",
    "        self.sys_opt = optim.Adam(self.sysmodel.parameters(), lr=lr_sysmodel)\n",
    "        self.set_weights() # initialise target models\n",
    "        self.replay_memory_buffer = deque(maxlen = buffer_capacity)\n",
    "        self.replay_memory_bufferd_dis = deque(maxlen = buffer_capacity)\n",
    "        self.batch_size = batch_size\n",
    "        self.tau = tau\n",
    "        self.policy_freq = policy_freq\n",
    "        self.gamma = gamma\n",
    "        self.upper_bound = self.env.action_space.high[0] #action space upper bound\n",
    "        self.lower_bound = self.env.action_space.low[0]  #action space lower bound\n",
    "        self.obs_upper_bound = self.env.observation_space.high[0] #state space upper bound\n",
    "        self.obs_lower_bound = self.env.observation_space.low[0]  #state space lower bound\n",
    "        self.policy_noise = policy_noise\n",
    "        self.noise_clip = noise_clip\n",
    "        self.std_noise = std_noise\n",
    "    \n",
    "    def create_actor(self):\n",
    "        self.actor = Actor(obs_dim, act_dim).to(self.device)\n",
    "        self.actor_target = Actor(obs_dim, act_dim).to(self.device)\n",
    "\n",
    "    def create_critic(self):\n",
    "        self.critic = Critic(obs_dim, act_dim).to(self.device)\n",
    "        self.critic_target = Critic(obs_dim, act_dim).to(self.device)\n",
    "\n",
    "    def create_sysmodel(self):\n",
    "        self.sysmodel = SysModel(obs_dim, act_dim).to(self.device)\n",
    "\n",
    "    def set_weights(self):\n",
    "        self.actor_target.load_state_dict(self.actor.state_dict())\n",
    "        self.critic_target.load_state_dict(self.critic.state_dict())\n",
    "        \n",
    "    def add_to_replay_memory(self, transition, buffername):\n",
    "        #add samples to replay memory\n",
    "        buffername.append(transition)\n",
    "\n",
    "    def get_random_sample_from_replay_mem(self, buffername):\n",
    "        #random samples from replay memory\n",
    "        random_sample = random.sample(buffername, self.batch_size)\n",
    "        return random_sample\n",
    "\n",
    "\n",
    "    def learn_and_update_weights_by_replay(self,training_iterations, weight, totrain):\n",
    "        \"\"\"\n",
    "        Train actor, critic and system networks. Apply delayed policy updates\n",
    "        Args:\n",
    "            training_iterations (int): The number of times batches from replay buffer are sampled and used to update network weights\n",
    "            weight (float): Soft scheduler used to slow learning after convergence\n",
    "            totrain (int): Flag for applying policy updates\n",
    "        \n",
    "        Returns: \n",
    "            float: System model MSE loss\n",
    "        \"\"\"\n",
    "       \n",
    "        if len(self.replay_memory_buffer) < 1e4:\n",
    "            return 1\n",
    "        \n",
    "        for it in range(training_iterations):\n",
    "            mini_batch = self.get_random_sample_from_replay_mem(self.replay_memory_buffer)\n",
    "            state_batch = torch.from_numpy(np.vstack([i[0] for i in mini_batch])).float().to(self.device)\n",
    "            action_batch = torch.from_numpy(np.vstack([i[1] for i in mini_batch])).float().to(self.device)\n",
    "            reward_batch = torch.from_numpy(np.vstack([i[2] for i in mini_batch])).float().to(self.device)\n",
    "            add_reward_batch = torch.from_numpy(np.vstack([i[3] for i in mini_batch])).float().to(self.device)\n",
    "            next_state_batch = torch.from_numpy(np.vstack([i[4] for i in mini_batch])).float().to(self.device)\n",
    "            done_list = torch.from_numpy(np.vstack([i[5] for i in mini_batch]).astype(np.uint8)).float().to(self.device)\n",
    "\n",
    "            \n",
    "            # Obtain target actions for target actor\n",
    "            target_actions = self.actor_target(next_state_batch)\n",
    "            #Â Add policy noise\n",
    "            offset_noises = torch.FloatTensor(action_batch.shape).data.normal_(0, self.policy_noise).to(self.device)\n",
    "\n",
    "            # Clip policy noise\n",
    "            offset_noises = offset_noises.clamp(-self.noise_clip, self.noise_clip)\n",
    "            # Apply policy noise to target actions\n",
    "            target_actions = (target_actions + offset_noises).clamp(self.lower_bound, self.upper_bound)\n",
    "\n",
    "            #Compute the target Q value\n",
    "            Q_targets1, Q_targets2 = self.critic_target(next_state_batch, target_actions)\n",
    "            Q_targets = torch.min(Q_targets1, Q_targets2)\n",
    "            Q_targets = reward_batch + self.gamma * Q_targets * (1 - done_list)\n",
    "\n",
    "            #Compute current Q estimates\n",
    "            current_Q1, current_Q2 = self.critic(state_batch, action_batch)\n",
    "            # Compute critic loss\n",
    "            critic_loss = F.mse_loss(current_Q1, Q_targets.detach()) + F.mse_loss(current_Q2, Q_targets.detach())\n",
    "            # Optimise the critics\n",
    "            self.crt_opt.zero_grad()\n",
    "            critic_loss.backward()\n",
    "            self.crt_opt.step()\n",
    "\n",
    "            self.soft_update_target(self.critic, self.critic_target)\n",
    "\n",
    "            predict_next_state = self.sysmodel(state_batch, action_batch) * (1-done_list)\n",
    "            next_state_batch = next_state_batch * (1 -done_list)\n",
    "            sysmodel_loss = F.mse_loss(predict_next_state, next_state_batch.detach())\n",
    "            self.sys_opt.zero_grad()\n",
    "            sysmodel_loss.backward()\n",
    "            self.sys_opt.step()\n",
    "        \n",
    "            s_flag = 1 if sysmodel_loss.item() < 0.020  else 0\n",
    "\n",
    "            if it % self.policy_freq == 0 and totrain == 1:\n",
    "                actions = self.actor(state_batch)\n",
    "                actor_loss1,_ = self.critic_target(state_batch, actions)\n",
    "                actor_loss1 =  actor_loss1.mean()\n",
    "                actor_loss =  - actor_loss1 \n",
    "\n",
    "                if s_flag == 1:\n",
    "                    p_actions = self.actor(state_batch)\n",
    "                    p_next_state = self.sysmodel(state_batch, p_actions).clamp(self.obs_lower_bound,self.obs_upper_bound)\n",
    "\n",
    "                    p_actions2 = self.actor(p_next_state.detach()) * self.upper_bound\n",
    "                    actor_loss2,_ = self.critic_target(p_next_state.detach(), p_actions2)\n",
    "                    actor_loss2 = actor_loss2.mean() \n",
    "\n",
    "                    p_next_state2= self.sysmodel(p_next_state.detach(), p_actions2).clamp(self.obs_lower_bound,self.obs_upper_bound)\n",
    "                    p_actions3 = self.actor(p_next_state2.detach()) * self.upper_bound\n",
    "                    actor_loss3,_ = self.critic_target(p_next_state2.detach(), p_actions3)\n",
    "                    actor_loss3 = actor_loss3.mean() \n",
    "\n",
    "                    actor_loss_final =  actor_loss - weight * (actor_loss2) - 0.5 *  weight * actor_loss3\n",
    "                else:\n",
    "                    actor_loss_final =  actor_loss\n",
    "\n",
    "                self.act_opt.zero_grad()\n",
    "                actor_loss_final.backward()\n",
    "                self.act_opt.step()\n",
    "\n",
    "                #Soft update target models\n",
    "                self.soft_update_target(self.actor, self.actor_target)\n",
    "                \n",
    "        return sysmodel_loss.item()\n",
    "    \n",
    "    def soft_update_target(self,local_model,target_model):\n",
    "        \"\"\"Soft update model parameters.\n",
    "        Î¸_target = Ï*Î¸_local + (1 - Ï)*Î¸_target\n",
    "        Args:\n",
    "            local_model (PyTorch model): model weights will be copied from\n",
    "            target_model (PyTorch model): model weights will be copied to\n",
    "            tau (float): interpolation parameter (soft update weight)\n",
    "        \"\"\"\n",
    "        for target_param, local_param in zip(target_model.parameters(), local_model.parameters()):\n",
    "            target_param.data.copy_(self.tau*local_param.data + (1.0-self.tau)*target_param.data)\n",
    "\n",
    "    def policy(self,state):\n",
    "        \"\"\"select action according to policy (actor)\"\"\"\n",
    "        state = torch.FloatTensor(state.reshape(1, -1)).to(device) # change to state?\n",
    "        self.actor.eval()\n",
    "        with torch.no_grad():\n",
    "            actions = self.actor(state).cpu().data.numpy()\n",
    "        self.actor.train()\n",
    "        # Adding noise to action\n",
    "        shift_action = np.random.normal(0, self.std_noise, size=self.env.action_space.shape[0])\n",
    "        sampled_actions = (actions + shift_action)\n",
    "        # We make sure action is within bounds\n",
    "        legal_action = np.clip(sampled_actions,self.lower_bound,self.upper_bound)\n",
    "        return np.squeeze(legal_action)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Make Env"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The device is: cpu (as recommended)\n",
      "actions are continuous with 4 dimensions/#actions\n",
      "observations are continuous with 24 dimensions/#observations\n",
      "maximum timesteps is: None\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# env = rld.make(\"rldurham/Walker\", render_mode=\"rgb_array\")\n",
    "env = rld.make(\"rldurham/Walker\", render_mode=\"rgb_array\", hardcore=True) # only attempt this when your agent has solved the non-hardcore version\n",
    "\n",
    "# get statistics, logs, and videos\n",
    "env = rld.Recorder(\n",
    "    env,\n",
    "    smoothing=10,                       # track rolling averages (useful for plotting)\n",
    "    video=True,                         # enable recording videos\n",
    "    video_folder=\"hardcore-videos-FORK-hc\",              # folder for videos\n",
    "    video_prefix=\"hdtk63-agent-video\",  # prefix for videos (replace xxxx00 with your username)\n",
    "    logs=True,                          # keep logs\n",
    ")\n",
    "\n",
    "# training on CPU recommended\n",
    "rld.check_device()\n",
    "\n",
    "# environment info\n",
    "discrete_act, discrete_obs, act_dim, obs_dim = rld.env_info(env, print_out=True)\n",
    "\n",
    "# render start image\n",
    "env.reset(seed=42)\n",
    "rld.render(env)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Episode Loop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from IPython import display as disp\n",
    "def plot(\n",
    "        info, show=True, ax=None, key='recorder', ignore_empty=True, clear=True,\n",
    "        length=False, r_sum=False, r_mean=False, r_std=False,\n",
    "        length_=False, r_sum_=False, r_mean_=False, r_std_=False\n",
    "    ):\n",
    "        if not info and ignore_empty:\n",
    "            return\n",
    "        fig = None\n",
    "        if ax is None:\n",
    "            fig, ax = plt.subplots(1, 1)\n",
    "\n",
    "        def get_kwargs(flag, **kwargs):\n",
    "            if isinstance(flag, dict):\n",
    "                return {**kwargs, **flag}\n",
    "            else:\n",
    "                return kwargs\n",
    "        idx = info[key]['idx']\n",
    "\n",
    "        if length:\n",
    "            _length = info[key]['length']\n",
    "            ax.plot(idx, _length, **get_kwargs(length, label='length'))\n",
    "        if r_sum:\n",
    "            _r_sum = np.array(info[key]['r_sum'])\n",
    "            ax.plot(idx, _r_sum, **get_kwargs(r_sum, label='r_sum'))\n",
    "        _r_mean = None\n",
    "        if r_mean:\n",
    "            _r_mean = np.array(info[key]['r_mean'])\n",
    "            ax.plot(idx, _r_mean, **get_kwargs(r_mean, label='r_mean'))\n",
    "        if r_std:\n",
    "            if _r_mean is None:\n",
    "                _r_mean = np.array(info[key]['r_mean'])\n",
    "            _r_std = np.array(info[key]['r_std'])\n",
    "            ax.fill_between(idx, _r_mean - _r_std, _r_mean + _r_std, **get_kwargs(r_std, label='r_std', alpha=0.2, color='tab:grey'))\n",
    "\n",
    "        if length_:\n",
    "            _length_ = info[key]['length_']\n",
    "            ax.plot(idx, _length_, **get_kwargs(length_, label='length_'))\n",
    "        if r_sum_:\n",
    "            _r_sum_ = np.array(info[key]['r_sum_'])\n",
    "            ax.plot(idx, _r_sum_, **get_kwargs(r_sum_, label='r_sum_'))\n",
    "        _r_mean_ = None\n",
    "        if r_mean_:\n",
    "            _r_mean_ = np.array(info[key]['r_mean_'])\n",
    "            ax.plot(idx, _r_mean_, **get_kwargs(r_mean_, label='r_mean_'))\n",
    "        if r_std_:\n",
    "            if _r_mean_ is None:\n",
    "                _r_mean_ = np.array(info[key]['r_mean_'])\n",
    "            _r_std_ = np.array(info[key]['r_std_'])\n",
    "            ax.fill_between(idx, _r_mean_ - _r_std_, _r_mean_ + _r_std_, **get_kwargs(r_std_, label='r_std_', alpha=0.2, color='tab:grey'))\n",
    "\n",
    "        ax.set_xlabel('episode index')\n",
    "        ax.legend()\n",
    "        if show:\n",
    "            if clear:\n",
    "                disp.clear_output(wait=True)\n",
    "            plt.show()\n",
    "        if fig is not None:\n",
    "            return fig, ax"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ep: 2000, ep timesteps: 885, fell over: 1152, ep reward: 311.93431101507457, weight: 0.20368867265421398, replay buffer length: 737023\n",
      "Training iterations 100\n"
     ]
    }
   ],
   "source": [
    "# in the submission please use seed_everything with seed 42 for verification\n",
    "seed, observation, info = rld.seed_everything(42, env)\n",
    "\n",
    "max_action = 1\n",
    "batch_size = 100\n",
    "agent = TD3_FORK(env, batch_size=batch_size)\n",
    "\n",
    "max_episodes = 2000\n",
    "max_timesteps = 2000\n",
    "\n",
    "total_timesteps = 0\n",
    "timesteps = 0\n",
    "# track statistics for plotting\n",
    "tracker = rld.InfoTracker()\n",
    "\n",
    "# switch video recording off (only switch on every x episodes as this is slow)\n",
    "env.video = False\n",
    "\n",
    "ep_reward_list = []\n",
    "sys_loss = 0\n",
    "numtrainedexp = 0\n",
    "save_time = 0\n",
    "expcount = 0\n",
    "totrain = 0\n",
    "fell_over = 0\n",
    "\n",
    "# training procedure\n",
    "for episode in range(max_episodes):\n",
    "    \n",
    "    # recording statistics and video can be switched on and off (video recording is slow!)\n",
    "    env.info = episode % 1 == 0   # track every x episodes (usually tracking every episode is fine)\n",
    "    # env.video = episode % 2276 == 0  # record videos every x episodes (set BEFORE calling reset!)\n",
    "\n",
    "    # reset for new episode\n",
    "    observation, info = env.reset()\n",
    "    temp_replay_buffer = []\n",
    "    \n",
    "    episodic_reward = 0\n",
    "    timesteps = 0\n",
    "    # run episode\n",
    "    for t in range(max_timesteps):\n",
    "        # select the agent action\n",
    "        if total_timesteps < 10000:\n",
    "            action = env.action_space.sample()\n",
    "        else:\n",
    "            action = agent.policy(np.array(observation))\n",
    "        \n",
    "        last_observation = observation\n",
    "        # take action in the environment\n",
    "        observation, reward, terminated, truncated, info = env.step(action)\n",
    "        episodic_reward += reward\n",
    "        if reward == -100: # Fell over\n",
    "            add_reward = -1\n",
    "            reward = -10\n",
    "            fell_over += 1\n",
    "            expcount += 1\n",
    "        else:\n",
    "            add_reward = 0\n",
    "            reward *= 5\n",
    "            \n",
    "         # check whether done\n",
    "        done = terminated or truncated\n",
    "        \n",
    "        # Remember\n",
    "        temp_replay_buffer.append((last_observation, action, reward, add_reward, observation, done))\n",
    "        \n",
    "        total_timesteps += 1\n",
    "        timesteps += 1\n",
    "        \n",
    "        # stop episode\n",
    "        if done or timesteps == 2000:\n",
    "            if add_reward == -1 or episodic_reward < 250:\n",
    "                totrain = 1\n",
    "                for temp in temp_replay_buffer:\n",
    "                    agent.add_to_replay_memory(temp, agent.replay_memory_buffer)\n",
    "            elif expcount > 0 and np.random.rand() > 0.5:\n",
    "                totrain = 1\n",
    "                expcount -= 10\n",
    "                for temp in temp_replay_buffer:\n",
    "                    agent.add_to_replay_memory(temp, agent.replay_memory_buffer)\n",
    "            break\n",
    "            \n",
    "        \n",
    "            \n",
    "        \n",
    "    # track and plot statistics\n",
    "    tracker.track(info)\n",
    "    if (episode + 1) % 10 == 0:\n",
    "        tracker.plot(info, r_mean_=True, r_std_=True, r_sum=dict(linestyle=':', marker='x'))\n",
    "    \n",
    "    ep_reward_list.append(episodic_reward)\n",
    "    \n",
    "    weight = 1 - np.clip(np.mean(ep_reward_list[-100:])/300, 0, 1)\n",
    "    print(f\"Ep: {episode+1}, ep timesteps: {timesteps}, fell over: {fell_over}, ep reward: {episodic_reward}, weight: {weight}, replay buffer length: {len(agent.replay_memory_buffer)}\")\n",
    "    if totrain == 1:\n",
    "        sys_loss = agent.learn_and_update_weights_by_replay(timesteps, weight, totrain)\n",
    "    else:\n",
    "        sys_loss = agent.learn_and_update_weights_by_replay(100, weight, totrain)\n",
    "    totrain = 0\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "# don't forget to close environment (e.g. triggers last video save)\n",
    "env.close()\n",
    "\n",
    "# write log file (for coursework)\n",
    "# env.write_log(folder=\"logs\", file=\"hdtk63-agent-log-FORK-hc-env-10k.txt\")  # replace xxxx00 with your username"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Hyperparameter tuning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean episode reward: -106.91386005393967 batch size 102\n",
      "Ep: 10, ep timesteps: 1680, fell over: 8, ep reward: -149.71084200334735, weight: 1.0, replay buffer length: 7823\n",
      "Ep: 11, ep timesteps: 100, fell over: 9, ep reward: -127.56182650756091, weight: 1.0, replay buffer length: 7923\n",
      "Ep: 12, ep timesteps: 65, fell over: 10, ep reward: -98.56015745922923, weight: 1.0, replay buffer length: 7988\n",
      "Ep: 13, ep timesteps: 1511, fell over: 11, ep reward: -143.86045319435652, weight: 1.0, replay buffer length: 9499\n",
      "Ep: 14, ep timesteps: 48, fell over: 12, ep reward: -105.82363502215594, weight: 1.0, replay buffer length: 9547\n",
      "Ep: 15, ep timesteps: 67, fell over: 13, ep reward: -101.60056665749289, weight: 1.0, replay buffer length: 9614\n",
      "Ep: 16, ep timesteps: 2000, fell over: 13, ep reward: -26.092565482389407, weight: 1.0, replay buffer length: 11614\n",
      "Training iterations 2000\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[W 2025-04-25 11:54:17,609] Trial 8 failed with parameters: {'batch_size': 102} because of the following error: KeyboardInterrupt().\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/williamfarmer/Documents/UNI/YEAR 3/Reinforcement Learning/Coursework/.venv/lib/python3.10/site-packages/optuna/study/_optimize.py\", line 197, in _run_trial\n",
      "    value_or_values = func(trial)\n",
      "  File \"/var/folders/mk/fp7_549n34x6lsk0877bvdtw0000gn/T/ipykernel_21478/4182498169.py\", line 401, in tune\n",
      "    sys_loss = agent.learn_and_update_weights_by_replay(timesteps, weight, totrain)\n",
      "  File \"/var/folders/mk/fp7_549n34x6lsk0877bvdtw0000gn/T/ipykernel_21478/4182498169.py\", line 181, in learn_and_update_weights_by_replay\n",
      "    self.soft_update_target(self.critic, self.critic_target)\n",
      "  File \"/var/folders/mk/fp7_549n34x6lsk0877bvdtw0000gn/T/ipykernel_21478/4182498169.py\", line 239, in soft_update_target\n",
      "    target_param.data.copy_(self.tau*local_param.data + (1.0-self.tau)*target_param.data)\n",
      "KeyboardInterrupt\n",
      "[W 2025-04-25 11:54:17,610] Trial 8 failed with value None.\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[11], line 427\u001b[0m\n\u001b[1;32m    424\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m best_reward\n\u001b[1;32m    426\u001b[0m study \u001b[38;5;241m=\u001b[39m optuna\u001b[38;5;241m.\u001b[39mcreate_study(direction\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmaximize\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m--> 427\u001b[0m \u001b[43mstudy\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43moptimize\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtune\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mn_trials\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m10\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/Documents/UNI/YEAR 3/Reinforcement Learning/Coursework/.venv/lib/python3.10/site-packages/optuna/study/study.py:475\u001b[0m, in \u001b[0;36mStudy.optimize\u001b[0;34m(self, func, n_trials, timeout, n_jobs, catch, callbacks, gc_after_trial, show_progress_bar)\u001b[0m\n\u001b[1;32m    373\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;21moptimize\u001b[39m(\n\u001b[1;32m    374\u001b[0m     \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m    375\u001b[0m     func: ObjectiveFuncType,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    382\u001b[0m     show_progress_bar: \u001b[38;5;28mbool\u001b[39m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[1;32m    383\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    384\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Optimize an objective function.\u001b[39;00m\n\u001b[1;32m    385\u001b[0m \n\u001b[1;32m    386\u001b[0m \u001b[38;5;124;03m    Optimization is done by choosing a suitable set of hyperparameter values from a given\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    473\u001b[0m \u001b[38;5;124;03m            If nested invocation of this method occurs.\u001b[39;00m\n\u001b[1;32m    474\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 475\u001b[0m     \u001b[43m_optimize\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    476\u001b[0m \u001b[43m        \u001b[49m\u001b[43mstudy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    477\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfunc\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfunc\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    478\u001b[0m \u001b[43m        \u001b[49m\u001b[43mn_trials\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mn_trials\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    479\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtimeout\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    480\u001b[0m \u001b[43m        \u001b[49m\u001b[43mn_jobs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mn_jobs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    481\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcatch\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcatch\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mif\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43misinstance\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mcatch\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mIterable\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01melse\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mcatch\u001b[49m\u001b[43m,\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    482\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcallbacks\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcallbacks\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    483\u001b[0m \u001b[43m        \u001b[49m\u001b[43mgc_after_trial\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mgc_after_trial\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    484\u001b[0m \u001b[43m        \u001b[49m\u001b[43mshow_progress_bar\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mshow_progress_bar\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    485\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/Documents/UNI/YEAR 3/Reinforcement Learning/Coursework/.venv/lib/python3.10/site-packages/optuna/study/_optimize.py:63\u001b[0m, in \u001b[0;36m_optimize\u001b[0;34m(study, func, n_trials, timeout, n_jobs, catch, callbacks, gc_after_trial, show_progress_bar)\u001b[0m\n\u001b[1;32m     61\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m     62\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m n_jobs \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m---> 63\u001b[0m         \u001b[43m_optimize_sequential\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m     64\u001b[0m \u001b[43m            \u001b[49m\u001b[43mstudy\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     65\u001b[0m \u001b[43m            \u001b[49m\u001b[43mfunc\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     66\u001b[0m \u001b[43m            \u001b[49m\u001b[43mn_trials\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     67\u001b[0m \u001b[43m            \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     68\u001b[0m \u001b[43m            \u001b[49m\u001b[43mcatch\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     69\u001b[0m \u001b[43m            \u001b[49m\u001b[43mcallbacks\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     70\u001b[0m \u001b[43m            \u001b[49m\u001b[43mgc_after_trial\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     71\u001b[0m \u001b[43m            \u001b[49m\u001b[43mreseed_sampler_rng\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m     72\u001b[0m \u001b[43m            \u001b[49m\u001b[43mtime_start\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m     73\u001b[0m \u001b[43m            \u001b[49m\u001b[43mprogress_bar\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mprogress_bar\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     74\u001b[0m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     75\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m     76\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m n_jobs \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m:\n",
      "File \u001b[0;32m~/Documents/UNI/YEAR 3/Reinforcement Learning/Coursework/.venv/lib/python3.10/site-packages/optuna/study/_optimize.py:160\u001b[0m, in \u001b[0;36m_optimize_sequential\u001b[0;34m(study, func, n_trials, timeout, catch, callbacks, gc_after_trial, reseed_sampler_rng, time_start, progress_bar)\u001b[0m\n\u001b[1;32m    157\u001b[0m         \u001b[38;5;28;01mbreak\u001b[39;00m\n\u001b[1;32m    159\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 160\u001b[0m     frozen_trial \u001b[38;5;241m=\u001b[39m \u001b[43m_run_trial\u001b[49m\u001b[43m(\u001b[49m\u001b[43mstudy\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfunc\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcatch\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    161\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    162\u001b[0m     \u001b[38;5;66;03m# The following line mitigates memory problems that can be occurred in some\u001b[39;00m\n\u001b[1;32m    163\u001b[0m     \u001b[38;5;66;03m# environments (e.g., services that use computing containers such as GitHub Actions).\u001b[39;00m\n\u001b[1;32m    164\u001b[0m     \u001b[38;5;66;03m# Please refer to the following PR for further details:\u001b[39;00m\n\u001b[1;32m    165\u001b[0m     \u001b[38;5;66;03m# https://github.com/optuna/optuna/pull/325.\u001b[39;00m\n\u001b[1;32m    166\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m gc_after_trial:\n",
      "File \u001b[0;32m~/Documents/UNI/YEAR 3/Reinforcement Learning/Coursework/.venv/lib/python3.10/site-packages/optuna/study/_optimize.py:248\u001b[0m, in \u001b[0;36m_run_trial\u001b[0;34m(study, func, catch)\u001b[0m\n\u001b[1;32m    241\u001b[0m         \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28;01mFalse\u001b[39;00m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mShould not reach.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    243\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (\n\u001b[1;32m    244\u001b[0m     frozen_trial\u001b[38;5;241m.\u001b[39mstate \u001b[38;5;241m==\u001b[39m TrialState\u001b[38;5;241m.\u001b[39mFAIL\n\u001b[1;32m    245\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m func_err \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    246\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(func_err, catch)\n\u001b[1;32m    247\u001b[0m ):\n\u001b[0;32m--> 248\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m func_err\n\u001b[1;32m    249\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m frozen_trial\n",
      "File \u001b[0;32m~/Documents/UNI/YEAR 3/Reinforcement Learning/Coursework/.venv/lib/python3.10/site-packages/optuna/study/_optimize.py:197\u001b[0m, in \u001b[0;36m_run_trial\u001b[0;34m(study, func, catch)\u001b[0m\n\u001b[1;32m    195\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m get_heartbeat_thread(trial\u001b[38;5;241m.\u001b[39m_trial_id, study\u001b[38;5;241m.\u001b[39m_storage):\n\u001b[1;32m    196\u001b[0m     \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 197\u001b[0m         value_or_values \u001b[38;5;241m=\u001b[39m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrial\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    198\u001b[0m     \u001b[38;5;28;01mexcept\u001b[39;00m exceptions\u001b[38;5;241m.\u001b[39mTrialPruned \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m    199\u001b[0m         \u001b[38;5;66;03m# TODO(mamu): Handle multi-objective cases.\u001b[39;00m\n\u001b[1;32m    200\u001b[0m         state \u001b[38;5;241m=\u001b[39m TrialState\u001b[38;5;241m.\u001b[39mPRUNED\n",
      "Cell \u001b[0;32mIn[11], line 401\u001b[0m, in \u001b[0;36mtune\u001b[0;34m(trial)\u001b[0m\n\u001b[1;32m    399\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEp: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mepisode\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, ep timesteps: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mtimesteps\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, fell over: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfell_over\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, ep reward: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mepisodic_reward\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, weight: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mweight\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, replay buffer length: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(agent\u001b[38;5;241m.\u001b[39mreplay_memory_buffer)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    400\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m totrain \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m--> 401\u001b[0m     sys_loss \u001b[38;5;241m=\u001b[39m \u001b[43magent\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mlearn_and_update_weights_by_replay\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtimesteps\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mweight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtotrain\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    402\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    403\u001b[0m     sys_loss \u001b[38;5;241m=\u001b[39m agent\u001b[38;5;241m.\u001b[39mlearn_and_update_weights_by_replay(\u001b[38;5;241m100\u001b[39m, weight, totrain)\n",
      "Cell \u001b[0;32mIn[11], line 181\u001b[0m, in \u001b[0;36mTD3_FORK.learn_and_update_weights_by_replay\u001b[0;34m(self, training_iterations, weight, totrain)\u001b[0m\n\u001b[1;32m    178\u001b[0m             critic_loss\u001b[38;5;241m.\u001b[39mbackward()\n\u001b[1;32m    179\u001b[0m             \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcrt_opt\u001b[38;5;241m.\u001b[39mstep()\n\u001b[0;32m--> 181\u001b[0m             \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msoft_update_target\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcritic\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcritic_target\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    183\u001b[0m \u001b[38;5;66;03m#             print(\"Training sysmodel\")\u001b[39;00m\n\u001b[1;32m    184\u001b[0m             \u001b[38;5;66;03m#Train_sysmodel\u001b[39;00m\n\u001b[1;32m    185\u001b[0m             predict_next_state \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msysmodel(state_batch, action_batch) \u001b[38;5;241m*\u001b[39m (\u001b[38;5;241m1\u001b[39m\u001b[38;5;241m-\u001b[39mdone_list)\n",
      "Cell \u001b[0;32mIn[11], line 239\u001b[0m, in \u001b[0;36mTD3_FORK.soft_update_target\u001b[0;34m(self, local_model, target_model)\u001b[0m\n\u001b[1;32m    230\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Soft update model parameters.\u001b[39;00m\n\u001b[1;32m    231\u001b[0m \u001b[38;5;124;03mÎ¸_target = Ï*Î¸_local + (1 - Ï)*Î¸_target\u001b[39;00m\n\u001b[1;32m    232\u001b[0m \u001b[38;5;124;03mParams\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;124;03m    tau (float): interpolation parameter\u001b[39;00m\n\u001b[1;32m    237\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    238\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m target_param, local_param \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(target_model\u001b[38;5;241m.\u001b[39mparameters(), local_model\u001b[38;5;241m.\u001b[39mparameters()):\n\u001b[0;32m--> 239\u001b[0m     \u001b[43mtarget_param\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdata\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcopy_\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtau\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mlocal_param\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdata\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m1.0\u001b[39;49m\u001b[38;5;241;43m-\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtau\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mtarget_param\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "# %pip install optuna\n",
    "import optuna\n",
    "import torch\n",
    "import rldurham as rld\n",
    "import numpy as np\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import copy\n",
    "device = torch.device(\"cpu\")\n",
    "from collections import deque\n",
    "import torch.optim as optim\n",
    "import random\n",
    "\n",
    "class Actor(nn.Module):\n",
    "    def __init__(self, state_dim, action_dim, fc1=400, fc2=300):\n",
    "        super(Actor, self).__init__()\n",
    "\n",
    "        self.l1 = nn.Linear(state_dim, fc1)\n",
    "        self.l2 = nn.Linear(fc1, fc2)\n",
    "        self.l3 = nn.Linear(fc2, action_dim)\n",
    "\n",
    "\n",
    "\n",
    "    def forward(self, state):\n",
    "        a = F.relu(self.l1(state))\n",
    "        a = F.relu(self.l2(a))\n",
    "        return torch.tanh(self.l3(a)) # max_action = 1 so no need to multiply\n",
    "     \n",
    "class Critic(nn.Module):\n",
    "    def __init__(self, state_size, action_size, fc1=400, fc2=300):\n",
    "        super(Critic, self).__init__()\n",
    "\n",
    "        # Q1 architecture\n",
    "        self.l1 = nn.Linear(state_size + action_size, fc1)\n",
    "        self.l2 = nn.Linear(fc1, fc2)\n",
    "        self.l3 = nn.Linear(fc2, 1)\n",
    "\n",
    "        # Q2 architecture\n",
    "        self.l4 = nn.Linear(state_size + action_size, fc1)\n",
    "        self.l5 = nn.Linear(fc1, fc2)\n",
    "        self.l6 = nn.Linear(fc2, 1)\n",
    "\n",
    "    def forward(self, state, action):\n",
    "        \"\"\"Build a critic (value) network that maps (state, action) pairs -> Q-values.\"\"\"\n",
    "        xa = torch.cat([state, action], 1)\n",
    "\n",
    "        x1 = F.relu(self.l1(xa))\n",
    "        x1 = F.relu(self.l2(x1))\n",
    "        x1 = self.l3(x1)\n",
    "\n",
    "        x2 = F.relu(self.l4(xa))\n",
    "        x2 = F.relu(self.l5(x2))\n",
    "        x2 = self.l6(x2)\n",
    "\n",
    "        return x1, x2\n",
    "    \n",
    "class SysModel(nn.Module):\n",
    "    def __init__(self, state_dim, action_dim, fc1=400, fc2=300):\n",
    "        super(SysModel, self).__init__()\n",
    "        self.l1 = nn.Linear(state_dim + action_dim, fc1)\n",
    "        self.l2 = nn.Linear(fc1, fc2)\n",
    "        self.l3 = nn.Linear(fc2, state_dim)\n",
    "\n",
    "\n",
    "    def forward(self, state, action):\n",
    "        \"\"\"Build a system model to predict the next state at a given state.\"\"\"\n",
    "        xa = torch.cat([state, action], 1)\n",
    "\n",
    "        x1 = F.relu(self.l1(xa))\n",
    "        x1 = F.relu(self.l2(x1))\n",
    "        x1 = self.l3(x1)\n",
    "\n",
    "        return x1\n",
    "    \n",
    "class TD3_FORK:\n",
    "    def __init__(\n",
    "        self,env,\n",
    "        gamma = 0.99, #discount factor\n",
    "        lr_actor = 3e-4,\n",
    "        lr_critic = 3e-4,\n",
    "        lr_sysmodel = 3e-4,\n",
    "        batch_size = 100,\n",
    "        buffer_capacity = 1000000,\n",
    "        tau = 0.02,  #target network update factor\n",
    "        policy_noise=0.2, \n",
    "        std_noise = 0.1,\n",
    "        noise_clip=0.5,\n",
    "        policy_freq=2 #target network update period\n",
    "    ):\n",
    "        self.device = torch.device(\"cpu\")\n",
    "        self.env = env\n",
    "        self.create_actor()\n",
    "        self.create_critic()\n",
    "        self.create_sysmodel()\n",
    "        self.act_opt = optim.Adam(self.actor.parameters(), lr=lr_actor)\n",
    "        self.crt_opt = optim.Adam(self.critic.parameters(), lr=lr_critic)\n",
    "        self.sys_opt = optim.Adam(self.sysmodel.parameters(), lr=lr_sysmodel)\n",
    "        self.set_weights()\n",
    "        self.replay_memory_buffer = deque(maxlen = buffer_capacity)\n",
    "        self.replay_memory_bufferd_dis = deque(maxlen = buffer_capacity)\n",
    "        self.batch_size = batch_size\n",
    "        self.tau = tau\n",
    "        self.policy_freq = policy_freq\n",
    "        self.gamma = gamma\n",
    "        self.upper_bound = self.env.action_space.high[0] #action space upper bound\n",
    "        self.lower_bound = self.env.action_space.low[0]  #action space lower bound\n",
    "        self.obs_upper_bound = self.env.observation_space.high[0] #state space upper bound\n",
    "        self.obs_lower_bound = self.env.observation_space.low[0]  #state space lower bound\n",
    "        self.policy_noise = policy_noise\n",
    "        self.noise_clip = noise_clip\n",
    "        self.std_noise = std_noise\n",
    "    \n",
    "    def create_actor(self):\n",
    "        self.actor = Actor(24, 4).to(self.device)\n",
    "        self.actor_target = Actor(24, 4).to(self.device)\n",
    "\n",
    "    def create_critic(self):\n",
    "        self.critic = Critic(24, 4).to(self.device)\n",
    "        self.critic_target = Critic(24, 4).to(self.device)\n",
    "\n",
    "    def create_sysmodel(self):\n",
    "        self.sysmodel = SysModel(24, 4).to(self.device)\n",
    "\n",
    "    def set_weights(self):\n",
    "        self.actor_target.load_state_dict(self.actor.state_dict())\n",
    "        self.critic_target.load_state_dict(self.critic.state_dict())\n",
    "        \n",
    "    def add_to_replay_memory(self, transition, buffername):\n",
    "        #add samples to replay memory\n",
    "        buffername.append(transition)\n",
    "\n",
    "    def get_random_sample_from_replay_mem(self, buffername):\n",
    "        #random samples from replay memory\n",
    "        random_sample = random.sample(buffername, self.batch_size)\n",
    "        return random_sample\n",
    "\n",
    "\n",
    "    def learn_and_update_weights_by_replay(self,training_iterations, weight, totrain):\n",
    "        \"\"\"Update policy and value parameters using given batch of experience tuples.\n",
    "        where:\n",
    "            actor_target(state) -> action\n",
    "            critic_target(state, action) -> Q-value\n",
    "        \"\"\"\n",
    "        # print(len(self.replay_memory_buffer))\n",
    "        if len(self.replay_memory_buffer) < 1e4:\n",
    "            return 1\n",
    "        print(f\"Training iterations {training_iterations}\")\n",
    "        for it in range(training_iterations):\n",
    "            mini_batch = self.get_random_sample_from_replay_mem(self.replay_memory_buffer)\n",
    "            state_batch = torch.from_numpy(np.vstack([i[0] for i in mini_batch])).float().to(self.device)\n",
    "            action_batch = torch.from_numpy(np.vstack([i[1] for i in mini_batch])).float().to(self.device)\n",
    "            reward_batch = torch.from_numpy(np.vstack([i[2] for i in mini_batch])).float().to(self.device)\n",
    "            add_reward_batch = torch.from_numpy(np.vstack([i[3] for i in mini_batch])).float().to(self.device)\n",
    "            next_state_batch = torch.from_numpy(np.vstack([i[4] for i in mini_batch])).float().to(self.device)\n",
    "            done_list = torch.from_numpy(np.vstack([i[5] for i in mini_batch]).astype(np.uint8)).float().to(self.device)\n",
    "\n",
    "            # Training and updating Actor & Critic networks.\n",
    "#             print(\"Training actor and critics\")\n",
    "            #Train Critic\n",
    "            target_actions = self.actor_target(next_state_batch)\n",
    "            offset_noises = torch.FloatTensor(action_batch.shape).data.normal_(0, self.policy_noise).to(self.device)\n",
    "\n",
    "            #clip noise\n",
    "            offset_noises = offset_noises.clamp(-self.noise_clip, self.noise_clip)\n",
    "            target_actions = (target_actions + offset_noises).clamp(self.lower_bound, self.upper_bound)\n",
    "\n",
    "            #Compute the target Q value\n",
    "            Q_targets1, Q_targets2 = self.critic_target(next_state_batch, target_actions)\n",
    "            Q_targets = torch.min(Q_targets1, Q_targets2)\n",
    "            Q_targets = reward_batch + self.gamma * Q_targets * (1 - done_list)\n",
    "\n",
    "            #Compute current Q estimates\n",
    "            current_Q1, current_Q2 = self.critic(state_batch, action_batch)\n",
    "            # Compute critic loss\n",
    "            critic_loss = F.mse_loss(current_Q1, Q_targets.detach()) + F.mse_loss(current_Q2, Q_targets.detach())\n",
    "            # Optimize the critic\n",
    "            self.crt_opt.zero_grad()\n",
    "            critic_loss.backward()\n",
    "            self.crt_opt.step()\n",
    "\n",
    "            self.soft_update_target(self.critic, self.critic_target)\n",
    "\n",
    "#             print(\"Training sysmodel\")\n",
    "            #Train_sysmodel\n",
    "            predict_next_state = self.sysmodel(state_batch, action_batch) * (1-done_list)\n",
    "            next_state_batch = next_state_batch * (1 -done_list)\n",
    "            sysmodel_loss = F.mse_loss(predict_next_state, next_state_batch.detach())\n",
    "            self.sys_opt.zero_grad()\n",
    "            sysmodel_loss.backward()\n",
    "            self.sys_opt.step()\n",
    "        \n",
    "            s_flag = 1 if sysmodel_loss.item() < 0.020  else 0\n",
    "\n",
    "            #Train Actor\n",
    "#             print(\"Updating policy\")\n",
    "            # Delayed policy updates\n",
    "            if it % self.policy_freq == 0 and totrain == 1:\n",
    "                actions = self.actor(state_batch)\n",
    "                actor_loss1,_ = self.critic_target(state_batch, actions)\n",
    "                actor_loss1 =  actor_loss1.mean()\n",
    "                actor_loss =  - actor_loss1 \n",
    "\n",
    "                if s_flag == 1:\n",
    "                    p_actions = self.actor(state_batch)\n",
    "                    p_next_state = self.sysmodel(state_batch, p_actions).clamp(self.obs_lower_bound,self.obs_upper_bound)\n",
    "\n",
    "                    p_actions2 = self.actor(p_next_state.detach()) * self.upper_bound\n",
    "                    actor_loss2,_ = self.critic_target(p_next_state.detach(), p_actions2)\n",
    "                    actor_loss2 = actor_loss2.mean() \n",
    "\n",
    "                    p_next_state2= self.sysmodel(p_next_state.detach(), p_actions2).clamp(self.obs_lower_bound,self.obs_upper_bound)\n",
    "                    p_actions3 = self.actor(p_next_state2.detach()) * self.upper_bound\n",
    "                    actor_loss3,_ = self.critic_target(p_next_state2.detach(), p_actions3)\n",
    "                    actor_loss3 = actor_loss3.mean() \n",
    "\n",
    "                    actor_loss_final =  actor_loss - weight * (actor_loss2) - 0.5 *  weight * actor_loss3\n",
    "                else:\n",
    "                    actor_loss_final =  actor_loss\n",
    "\n",
    "                self.act_opt.zero_grad()\n",
    "                actor_loss_final.backward()\n",
    "                self.act_opt.step()\n",
    "\n",
    "                #Soft update target models\n",
    "                self.soft_update_target(self.actor, self.actor_target)\n",
    "                \n",
    "        return sysmodel_loss.item()\n",
    "    \n",
    "    def soft_update_target(self,local_model,target_model):\n",
    "        \"\"\"Soft update model parameters.\n",
    "        Î¸_target = Ï*Î¸_local + (1 - Ï)*Î¸_target\n",
    "        Args:\n",
    "            local_model: PyTorch model (weights will be copied from)\n",
    "            target_model: PyTorch model (weights will be copied to)\n",
    "            tau (float): interpolation parameter\n",
    "        \"\"\"\n",
    "        for target_param, local_param in zip(target_model.parameters(), local_model.parameters()):\n",
    "            target_param.data.copy_(self.tau*local_param.data + (1.0-self.tau)*target_param.data)\n",
    "\n",
    "    def policy(self,state):\n",
    "        \"\"\"select action based on ACTOR\"\"\"\n",
    "        state = torch.FloatTensor(state.reshape(1, -1)).to(device)\n",
    "        self.actor.eval()\n",
    "        with torch.no_grad():\n",
    "            actions = self.actor(state).cpu().data.numpy()\n",
    "        self.actor.train()\n",
    "        # Adding noise to action\n",
    "        shift_action = np.random.normal(0, self.std_noise, size=self.env.action_space.shape[0])\n",
    "        sampled_actions = (actions + shift_action)\n",
    "        # We make sure action is within bounds\n",
    "        legal_action = np.clip(sampled_actions,self.lower_bound,self.upper_bound)\n",
    "        return np.squeeze(legal_action)\n",
    "\n",
    "\n",
    "    def select_action(self,state):\n",
    "        \"\"\"select action based on ACTOR\"\"\"\n",
    "        state = torch.from_numpy(state).float().unsqueeze(0).to(self.device)\n",
    "        with torch.no_grad():\n",
    "            actions = self.actor_target(state).cpu().data.numpy()\n",
    "        return np.squeeze(actions)\n",
    "    \n",
    "def tune(trial):\n",
    "    # env = rld.make(\"rldurham/Walker\", render_mode=\"rgb_array\")\n",
    "    env = rld.make(\"rldurham/Walker\", render_mode=\"rgb_array\", hardcore=True) # only attempt this when your agent has solved the non-hardcore version\n",
    "\n",
    "    # get statistics, logs, and videos\n",
    "    env = rld.Recorder(\n",
    "        env,\n",
    "        smoothing=10,                       # track rolling averages (useful for plotting)\n",
    "        video=True,                         # enable recording videos\n",
    "        video_folder=f\"hardcore-videos-FORK-{trial.number+4}\",              # folder for videos\n",
    "        video_prefix=\"hdtk63-agent-video\",  # prefix for videos (replace xxxx00 with your username)\n",
    "        logs=True,                          # keep logs\n",
    "    )\n",
    "\n",
    "    # training on CPU recommended\n",
    "    rld.check_device()\n",
    "\n",
    "    # environment info\n",
    "    discrete_act, discrete_obs, act_dim, obs_dim = rld.env_info(env, print_out=True)\n",
    "    # print(act_dim, obs_dim)\n",
    "    # render start image\n",
    "    env.reset(seed=42)\n",
    "    rld.render(env)\n",
    "    \n",
    "    # in the submission please use seed_everything with seed 42 for verification\n",
    "    seed, observation, info = rld.seed_everything(42, env)\n",
    "\n",
    "    max_action = 1\n",
    "    # GENERATE PARAMS\n",
    "    # gamma = trial.suggest_uniform(\"gamma\", 0.97, 0.99999)\n",
    "    # learning_rate = trial.suggest_loguniform(\"learning_rate\",5e-5, 1e-3)\n",
    "    batch_size = trial.suggest_int(\"batch_size\", 64, 256)\n",
    "    # buffer_capacity = 1000000\n",
    "    # tau = trial.suggest_uniform(\"tau\",0.001,0.03)  #target network update factor\n",
    "    # policy_noise = trial.suggest_uniform(\"policy_noise\",0.1,0.5)\n",
    "    # std_noise = trial.suggest_uniform(\"policy_noise\",0.01,0.4)\n",
    "    # noise_clip = trial.suggest_uniform(\"policy_noise\",0.3,0.9)\n",
    "    # policy_freq=2 #target network update period\n",
    "    # print(f\"lr: {learning_rate}, batch size: {batch_size}, gamma: {gamma}, tau {tau}, policy noise {policy_noise}, noise clip {noise_clip}, std noise {std_noise}, policy delay {policy_freq}\")\n",
    "    # agent = TD3_FORK(env, gamma = gamma, lr_actor = learning_rate, lr_critic = learning_rate, lr_sysmodel = learning_rate, batch_size=batch_size, buffer_capacity=1000000, tau=tau, policy_noise=policy_noise, std_noise = std_noise, noise_clip=noise_clip, policy_freq=policy_freq)\n",
    "    agent = TD3_FORK(env, batch_size=batch_size)\n",
    "    max_episodes = 2500\n",
    "    max_timesteps = 2000\n",
    "\n",
    "    total_timesteps = 0\n",
    "    timesteps = 0\n",
    "    # track statistics for plotting\n",
    "    tracker = rld.InfoTracker()\n",
    "\n",
    "    # switch video recording off (only switch on every x episodes as this is slow)\n",
    "    env.video = False\n",
    "    # print(\"Scale\", 5+(trial.number-4)/10)\n",
    "    ep_reward_list = []\n",
    "    sys_loss = 0\n",
    "    numtrainedexp = 0\n",
    "    save_time = 0\n",
    "    expcount = 0\n",
    "    totrain = 0\n",
    "    fell_over = 0\n",
    "    best_reward = -200\n",
    "    first_to_300 = None\n",
    "    # training procedure\n",
    "    for episode in range(max_episodes):\n",
    "        \n",
    "        # recording statistics and video can be switched on and off (video recording is slow!)\n",
    "        env.info = episode % 1 == 0   # track every x episodes (usually tracking every episode is fine)\n",
    "        # env.video = episode % 50 == 0  # record videos every x episodes (set BEFORE calling reset!)\n",
    "\n",
    "        # reset for new episode\n",
    "        observation, info = env.reset()\n",
    "        temp_replay_buffer = []\n",
    "        \n",
    "        episodic_reward = 0\n",
    "        timesteps = 0\n",
    "        \n",
    "        # run episode\n",
    "        for t in range(max_timesteps):\n",
    "            # select the agent action\n",
    "            if total_timesteps < 10000:\n",
    "                action = env.action_space.sample()\n",
    "            else:\n",
    "                action = agent.policy(np.array(observation))\n",
    "            \n",
    "            last_observation = observation\n",
    "            # take action in the environment\n",
    "            observation, reward, terminated, truncated, info = env.step(action)\n",
    "            # Update episodic reward before reward transformation is applied\n",
    "            episodic_reward += reward\n",
    "            if reward == -100: # Fell over\n",
    "                add_reward = -1\n",
    "                reward = -10\n",
    "                fell_over += 1\n",
    "                expcount += 1\n",
    "            else:\n",
    "                add_reward = 0\n",
    "                reward *= 5\n",
    "                \n",
    "            # check whether done\n",
    "            done = terminated or truncated\n",
    "            \n",
    "            # Remember\n",
    "            temp_replay_buffer.append((last_observation, action, reward, add_reward, observation, done))\n",
    "            \n",
    "            total_timesteps += 1\n",
    "            timesteps += 1\n",
    "            \n",
    "            # stop episode\n",
    "            if done or timesteps == 2000:\n",
    "                if add_reward == -1 or episodic_reward < 250:\n",
    "                    totrain = 1\n",
    "                    for temp in temp_replay_buffer:\n",
    "                        agent.add_to_replay_memory(temp, agent.replay_memory_buffer)\n",
    "                elif expcount > 0 and np.random.rand() > 0.5:\n",
    "                    totrain = 1\n",
    "                    expcount -= 10\n",
    "                    for temp in temp_replay_buffer:\n",
    "                        agent.add_to_replay_memory(temp, agent.replay_memory_buffer)\n",
    "                break\n",
    "             \n",
    "        # track and plot statistics\n",
    "        tracker.track(info)\n",
    "        if (episode + 1) % 10 == 0:\n",
    "            tracker.plot(r_mean_=True, r_std_=True, r_sum=dict(linestyle=':', marker='x'))\n",
    "            print(f\"mean episode reward: {np.mean(ep_reward_list)} batch size {batch_size}\")\n",
    "        if episodic_reward > best_reward:\n",
    "            best_reward = episodic_reward\n",
    "        if episodic_reward >= 300 and first_to_300 is None:\n",
    "            first_to_300 = episode\n",
    "        if first_to_300 is not None:\n",
    "            # Print out every episode in case kernel disconnects\n",
    "            print(f\"Reached 300 at episode {first_to_300} and best reward is {best_reward}\")\n",
    "            # print(f\"lr: {learning_rate}, batch size: {batch_size}, gamma: {gamma}, tau {tau}, policy noise {policy_noise}, noise clip {noise_clip}, std noise {std_noise}, policy delay {policy_freq}\")\n",
    "        \n",
    "        ep_reward_list.append(episodic_reward)\n",
    "        \n",
    "        weight = 1 - np.clip(np.mean(ep_reward_list[-100:])/300, 0, 1)\n",
    "        print(f\"Ep: {episode+1}, ep timesteps: {timesteps}, fell over: {fell_over}, ep reward: {episodic_reward}, weight: {weight}, replay buffer length: {len(agent.replay_memory_buffer)}\")\n",
    "        if totrain == 1:\n",
    "            sys_loss = agent.learn_and_update_weights_by_replay(timesteps, weight, totrain)\n",
    "        else:\n",
    "            sys_loss = agent.learn_and_update_weights_by_replay(100, weight, totrain)\n",
    "        totrain = 0\n",
    "        \n",
    "        if best_reward < 300 and episode >= 500: # performs notably worse than mult=5\n",
    "            env.write_log(folder=\"logs\", file=f\"hdtk63-agent-log-FORK-{batch_size}.txt\")  # replace xxxx00 with your username\n",
    "            myFile = open(\"hardcore-param-tuning.txt\",\"a\")\n",
    "            myFile.write(f\"Batch Size {batch_size}, high score {best_reward}, first to 300: {first_to_300} mean episodic reward: {np.mean(ep_reward_list)}\\n\")\n",
    "            # myFile.write(f\"lr: {learning_rate}, batch size: {batch_size}, gamma: {gamma}, tau {tau}, policy noise {policy_noise}, noise clip {noise_clip}, std noise {std_noise}, policy delay {policy_freq}, best reward: {best_reward}, first over 300: {first_to_300}\")\n",
    "            myFile.close()\n",
    "            return best_reward\n",
    "        \n",
    "        \n",
    "    # don't forget to close environment (e.g. triggers last video save)\n",
    "    env.close()\n",
    "\n",
    "    # write log file (for coursework)\n",
    "    env.write_log(folder=\"logs\", file=f\"hdtk63-agent-log-FORK-{batch_size}.txt\")  # replace xxxx00 with your username\n",
    "    myFile = open(\"hardcore-param-tuning.txt\",\"a\")\n",
    "    myFile.write(f\"Batch Size {batch_size}, high score {best_reward}, first to 300: {first_to_300} mean episodic reward: {np.mean(ep_reward_list)}\\n\")\n",
    "    # myFile.write(f\"lr: {learning_rate}, batch size: {batch_size}, gamma: {gamma}, tau {tau}, policy noise {policy_noise}, noise clip {noise_clip}, std noise {std_noise}, policy delay {policy_freq}, best reward: {best_reward}, first over 300: {first_to_300}\")\n",
    "    myFile.close()\n",
    "    return best_reward\n",
    "\n",
    "study = optuna.create_study(direction=\"maximize\")\n",
    "study.optimize(tune, n_trials=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reward for falling over = -5 (suggested): 318.7"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
